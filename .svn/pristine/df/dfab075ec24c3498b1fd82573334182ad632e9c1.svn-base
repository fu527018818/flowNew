import axios from 'axios';
import config from '../api/config';
import store from '../store/index';
import JsEncrypt from 'jsencrypt/bin/jsencrypt'; //RSA
import CryptoJS from 'crypto-js'; //aes
import { MessageBox } from 'element-ui';
import {objKeySort,encryptLogin,decode,signSort} from './encryption';
const service = axios.create(config);
// RSA公钥
var publicKey = `MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcaVfbycoF4yfXfSY6x6dOijO8
in2Ibe9XKxYU64wZnczTCv32AkEQty2U777jpswOmsQSqQ+wZrkBftgmSNq+u0d3
HEvVFmSALSI7u/MLrHHHYBggTi2iisDRAn0wjRMzsm1+prFPjV4tFSe1+HPeH0Dv
ZFfyaGOgXJ7hsqp2dwIDAQAB`;
// request拦截器
service.interceptors.request.use(config => {
  var data = config.data;
  console.log(data)
        var checkUrl = config.url;
        var obj = {} 
        obj.client= "pc";
        obj.version ="1.0";
        // 登录之前
        if(checkUrl=="/user/check/id"||checkUrl=="/user/login"){
              var encrypt = new JsEncrypt.JSEncrypt();
              encrypt.setPublicKey(publicKey);
              obj.params  = encrypt.encrypt(JSON.stringify(data));
          }else{
            // 判断登录成功后
              if(!store.getters.token==""||ls.get('token')&&!store.getters.userInfo==""||ls.get('secret')){
                          //优先在vuex里面取值防止localstange被清除  
                    //aes加密
                obj.params = encryptLogin(store.getters.secret.accept||ls.get('secret').accept,data);
                // obj.sign = CryptoJS.MD5(objKeySort(data)).toString();
                obj.sign = signSort(data)
                obj.id= ls.get('userId');
                obj.token = store.getters.token||ls.get('token');
              }
          }
        config.data = obj;
      return config
  }, error => {
    console.log(error);
    Promise.reject(error);
  });
  
  // response拦截器
  service.interceptors.response.use(
    response => {
      //登录之后返回数据进行解密
      if(response.data.status=="401"){
         //app.vue监听token做路由跳转
          store.commit('REMOVE_TOKEN');
        return response
      }
      var checkUrl = response.config.url;
        if(!(checkUrl==process.env.BASE_API+"/user/login")&&!(checkUrl==process.env.BASE_API+"/user/check/id")){
                 //aes解密
          var data = decode(store.getters.secret.response||ls.get('secret').response,response.data)
              store.commit('SET_TOKEN',data.data.token)
              response.data = data;
        }
      console.log('返回前数据对象response: %o',response)
      return response
    },
    /**
    * 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页
    * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中
    */
  //  const res = response.data;
  //     if (res.code !== 20000) {
  //       Message({
  //         message: res.message,
  //         type: 'error',
  //         duration: 5 * 1000
  //       });
  //       // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;
  //       if (res.code === 50008 || res.code === 50012 || res.code === 50014) {
  //         MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {
  //           confirmButtonText: '重新登录',
  //           cancelButtonText: '取消',
  //           type: 'warning'
  //         }).then(() => {
  //           store.dispatch('FedLogOut').then(() => {
  //             location.reload();// 为了重新实例化vue-router对象 避免bug
  //           });
  //         })
  //       }
  //       return Promise.reject('error');
  //     } else {
  //       return response.data;
  //     }
    error => {
      console.log('err' + error);
      return Promise.reject(error);
    }
  );
  export default service